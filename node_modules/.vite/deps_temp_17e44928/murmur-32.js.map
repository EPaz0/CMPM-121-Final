{
  "version": 3,
  "sources": ["../../encode-utf8/index.js", "../../fmix/index.js", "../../murmur-32/index.js"],
  "sourcesContent": ["export default function encodeUtf8 (input) {\n  const result = []\n  const size = input.length\n\n  for (let index = 0; index < size; index++) {\n    let point = input.charCodeAt(index)\n\n    if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {\n      const second = input.charCodeAt(index + 1)\n\n      if (second >= 0xDC00 && second <= 0xDFFF) {\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000\n        index += 1\n      }\n    }\n\n    // US-ASCII\n    if (point < 0x80) {\n      result.push(point)\n      continue\n    }\n\n    // 2-byte UTF-8\n    if (point < 0x800) {\n      result.push((point >> 6) | 192)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // 3-byte UTF-8\n    if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {\n      result.push((point >> 12) | 224)\n      result.push(((point >> 6) & 63) | 128)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // 4-byte UTF-8\n    if (point >= 0x10000 && point <= 0x10FFFF) {\n      result.push((point >> 18) | 240)\n      result.push(((point >> 12) & 63) | 128)\n      result.push(((point >> 6) & 63) | 128)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // Invalid character\n    result.push(0xEF, 0xBF, 0xBD)\n  }\n\n  return new Uint8Array(result).buffer\n}\n", "export default function fmix (input) {\n  input ^= (input >>> 16)\n  input = Math.imul(input, 0x85ebca6b)\n  input ^= (input >>> 13)\n  input = Math.imul(input, 0xc2b2ae35)\n  input ^= (input >>> 16)\n\n  return (input >>> 0)\n}\n", "import encodeUtf8 from 'encode-utf8'\nimport fmix from 'fmix'\n\nconst C = new Uint32Array([\n  0xcc9e2d51,\n  0x1b873593\n])\n\nfunction rotl (m, n) {\n  return (m << n) | (m >>> (32 - n))\n}\n\nfunction body (key, hash) {\n  const blocks = (key.byteLength / 4) | 0\n  const view32 = new Uint32Array(key, 0, blocks)\n\n  for (let i = 0; i < blocks; i++) {\n    view32[i] = Math.imul(view32[i], C[0])\n    view32[i] = rotl(view32[i], 15)\n    view32[i] = Math.imul(view32[i], C[1])\n\n    hash[0] = (hash[0] ^ view32[i])\n    hash[0] = rotl(hash[0], 13)\n    hash[0] = Math.imul(hash[0], 5) + 0xe6546b64\n  }\n}\n\nfunction tail (key, hash) {\n  const blocks = (key.byteLength / 4) | 0\n  const reminder = (key.byteLength % 4)\n\n  let k = 0\n  const tail = new Uint8Array(key, blocks * 4, reminder)\n  switch (reminder) {\n    case 3:\n      k = (k ^ (tail[2] << 16))\n      // fallthrough\n    case 2:\n      k = (k ^ (tail[1] << 8))\n      // fallthrough\n    case 1:\n      k = (k ^ (tail[0] << 0))\n\n      k = Math.imul(k, C[0])\n      k = rotl(k, 15)\n      k = Math.imul(k, C[1])\n      hash[0] = (hash[0] ^ k)\n  }\n}\n\nfunction finalize (key, hash) {\n  hash[0] = (hash[0] ^ key.byteLength)\n  hash[0] = fmix(hash[0])\n}\n\nexport default function murmur (key, seed) {\n  seed = (seed ? (seed | 0) : 0)\n\n  if (typeof key === 'string') {\n    key = encodeUtf8(key)\n  }\n\n  if (!(key instanceof ArrayBuffer)) {\n    throw new TypeError('Expected key to be ArrayBuffer or string')\n  }\n\n  const hash = new Uint32Array([seed])\n\n  body(key, hash)\n  tail(key, hash)\n  finalize(key, hash)\n\n  return hash.buffer\n}\n"],
  "mappings": "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",
  "names": ["tail"]
}
